/**
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import {
    AuthServiceInterface,
    BasicAuthUserPasswdGetRequestParams,
    BearerGetRequestParams,
    DigestAuthQopUserPasswdAlgorithmGetRequestParams,
    DigestAuthQopUserPasswdAlgorithmStaleAfterGetRequestParams,
    DigestAuthQopUserPasswdGetRequestParams,
    HiddenBasicAuthUserPasswdGetRequestParams
} from './auth.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class AuthService implements AuthServiceInterface {

    protected basePath = 'https://httpbin.org';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Prompts the user for authorization using HTTP Basic Auth.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public basicAuthUserPasswdGet(requestParameters: BasicAuthUserPasswdGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;
    public basicAuthUserPasswdGet(requestParameters: BasicAuthUserPasswdGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;
    public basicAuthUserPasswdGet(requestParameters: BasicAuthUserPasswdGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;
    public basicAuthUserPasswdGet(requestParameters: BasicAuthUserPasswdGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {
        const user = requestParameters.user;
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling basicAuthUserPasswdGet.');
        }
        const passwd = requestParameters.passwd;
        if (passwd === null || passwd === undefined) {
            throw new Error('Required parameter passwd was null or undefined when calling basicAuthUserPasswdGet.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/basic-auth/${encodeURIComponent(String(user))}/${encodeURIComponent(String(passwd))}`,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Prompts the user for authorization using bearer authentication.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public bearerGet(requestParameters: BearerGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;
    public bearerGet(requestParameters: BearerGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;
    public bearerGet(requestParameters: BearerGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;
    public bearerGet(requestParameters: BearerGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {
        const authorization = requestParameters.authorization;

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/bearer`,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Prompts the user for authorization using Digest Auth + Algorithm.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public digestAuthQopUserPasswdAlgorithmGet(requestParameters: DigestAuthQopUserPasswdAlgorithmGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;
    public digestAuthQopUserPasswdAlgorithmGet(requestParameters: DigestAuthQopUserPasswdAlgorithmGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;
    public digestAuthQopUserPasswdAlgorithmGet(requestParameters: DigestAuthQopUserPasswdAlgorithmGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;
    public digestAuthQopUserPasswdAlgorithmGet(requestParameters: DigestAuthQopUserPasswdAlgorithmGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {
        const qop = requestParameters.qop;
        if (qop === null || qop === undefined) {
            throw new Error('Required parameter qop was null or undefined when calling digestAuthQopUserPasswdAlgorithmGet.');
        }
        const user = requestParameters.user;
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling digestAuthQopUserPasswdAlgorithmGet.');
        }
        const passwd = requestParameters.passwd;
        if (passwd === null || passwd === undefined) {
            throw new Error('Required parameter passwd was null or undefined when calling digestAuthQopUserPasswdAlgorithmGet.');
        }
        const algorithm = requestParameters.algorithm;
        if (algorithm === null || algorithm === undefined) {
            throw new Error('Required parameter algorithm was null or undefined when calling digestAuthQopUserPasswdAlgorithmGet.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/digest-auth/${encodeURIComponent(String(qop))}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(passwd))}/${encodeURIComponent(String(algorithm))}`,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Prompts the user for authorization using Digest Auth + Algorithm.
     * allow settings the stale_after argument. 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public digestAuthQopUserPasswdAlgorithmStaleAfterGet(requestParameters: DigestAuthQopUserPasswdAlgorithmStaleAfterGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;
    public digestAuthQopUserPasswdAlgorithmStaleAfterGet(requestParameters: DigestAuthQopUserPasswdAlgorithmStaleAfterGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;
    public digestAuthQopUserPasswdAlgorithmStaleAfterGet(requestParameters: DigestAuthQopUserPasswdAlgorithmStaleAfterGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;
    public digestAuthQopUserPasswdAlgorithmStaleAfterGet(requestParameters: DigestAuthQopUserPasswdAlgorithmStaleAfterGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {
        const qop = requestParameters.qop;
        if (qop === null || qop === undefined) {
            throw new Error('Required parameter qop was null or undefined when calling digestAuthQopUserPasswdAlgorithmStaleAfterGet.');
        }
        const user = requestParameters.user;
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling digestAuthQopUserPasswdAlgorithmStaleAfterGet.');
        }
        const passwd = requestParameters.passwd;
        if (passwd === null || passwd === undefined) {
            throw new Error('Required parameter passwd was null or undefined when calling digestAuthQopUserPasswdAlgorithmStaleAfterGet.');
        }
        const algorithm = requestParameters.algorithm;
        if (algorithm === null || algorithm === undefined) {
            throw new Error('Required parameter algorithm was null or undefined when calling digestAuthQopUserPasswdAlgorithmStaleAfterGet.');
        }
        const staleAfter = requestParameters.staleAfter;
        if (staleAfter === null || staleAfter === undefined) {
            throw new Error('Required parameter staleAfter was null or undefined when calling digestAuthQopUserPasswdAlgorithmStaleAfterGet.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/digest-auth/${encodeURIComponent(String(qop))}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(passwd))}/${encodeURIComponent(String(algorithm))}/${encodeURIComponent(String(staleAfter))}`,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Prompts the user for authorization using Digest Auth.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public digestAuthQopUserPasswdGet(requestParameters: DigestAuthQopUserPasswdGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;
    public digestAuthQopUserPasswdGet(requestParameters: DigestAuthQopUserPasswdGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;
    public digestAuthQopUserPasswdGet(requestParameters: DigestAuthQopUserPasswdGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;
    public digestAuthQopUserPasswdGet(requestParameters: DigestAuthQopUserPasswdGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {
        const qop = requestParameters.qop;
        if (qop === null || qop === undefined) {
            throw new Error('Required parameter qop was null or undefined when calling digestAuthQopUserPasswdGet.');
        }
        const user = requestParameters.user;
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling digestAuthQopUserPasswdGet.');
        }
        const passwd = requestParameters.passwd;
        if (passwd === null || passwd === undefined) {
            throw new Error('Required parameter passwd was null or undefined when calling digestAuthQopUserPasswdGet.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/digest-auth/${encodeURIComponent(String(qop))}/${encodeURIComponent(String(user))}/${encodeURIComponent(String(passwd))}`,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Prompts the user for authorization using HTTP Basic Auth.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public hiddenBasicAuthUserPasswdGet(requestParameters: HiddenBasicAuthUserPasswdGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;
    public hiddenBasicAuthUserPasswdGet(requestParameters: HiddenBasicAuthUserPasswdGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;
    public hiddenBasicAuthUserPasswdGet(requestParameters: HiddenBasicAuthUserPasswdGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;
    public hiddenBasicAuthUserPasswdGet(requestParameters: HiddenBasicAuthUserPasswdGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {
        const user = requestParameters.user;
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling hiddenBasicAuthUserPasswdGet.');
        }
        const passwd = requestParameters.passwd;
        if (passwd === null || passwd === undefined) {
            throw new Error('Required parameter passwd was null or undefined when calling hiddenBasicAuthUserPasswdGet.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType_: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/hidden-basic-auth/${encodeURIComponent(String(user))}/${encodeURIComponent(String(passwd))}`,
            {
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
