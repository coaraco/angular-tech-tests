/**
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';



import { Configuration }                                     from '../configuration';


export interface Base64ValueGetRequestParams {
    value: string;
}

export interface BytesNGetRequestParams {
    n: any;
}

export interface DelayDelayDeleteRequestParams {
    delay: any;
}

export interface DelayDelayGetRequestParams {
    delay: any;
}

export interface DelayDelayPatchRequestParams {
    delay: any;
}

export interface DelayDelayPostRequestParams {
    delay: any;
}

export interface DelayDelayPutRequestParams {
    delay: any;
}

export interface DripGetRequestParams {
    duration?: number;
    numbytes?: number;
    code?: number;
    delay?: number;
}

export interface LinksNOffsetGetRequestParams {
    n: any;
    offset: any;
}

export interface RangeNumbytesGetRequestParams {
    numbytes: any;
}

export interface StreamBytesNGetRequestParams {
    n: any;
}

export interface StreamNGetRequestParams {
    n: any;
}


export interface DynamicDataServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Decodes base64url-encoded string.
     * 
* @param requestParameters
     */
    base64ValueGet(requestParameters: Base64ValueGetRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Returns n random bytes generated with given seed
     * 
* @param requestParameters
     */
    bytesNGet(requestParameters: BytesNGetRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
* @param requestParameters
     */
    delayDelayDelete(requestParameters: DelayDelayDeleteRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
* @param requestParameters
     */
    delayDelayGet(requestParameters: DelayDelayGetRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
* @param requestParameters
     */
    delayDelayPatch(requestParameters: DelayDelayPatchRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
* @param requestParameters
     */
    delayDelayPost(requestParameters: DelayDelayPostRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
* @param requestParameters
     */
    delayDelayPut(requestParameters: DelayDelayPutRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Drips data over a duration after an optional initial delay.
     * 
* @param requestParameters
     */
    dripGet(requestParameters: DripGetRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Generate a page containing n links to other pages which do the same.
     * 
* @param requestParameters
     */
    linksNOffsetGet(requestParameters: LinksNOffsetGetRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Streams n random bytes generated with given seed, at given chunk size per packet.
     * 
* @param requestParameters
     */
    rangeNumbytesGet(requestParameters: RangeNumbytesGetRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Streams n random bytes generated with given seed, at given chunk size per packet.
     * 
* @param requestParameters
     */
    streamBytesNGet(requestParameters: StreamBytesNGetRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Stream n JSON responses
     * 
* @param requestParameters
     */
    streamNGet(requestParameters: StreamNGetRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Return a UUID4.
     * 
*/
    uuidGet(extraHttpRequestParams?: any): Observable<{}>;

}
